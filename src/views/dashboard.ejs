<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    <style>
        :root {
            --primary: #128c7e;
            --primary-dark: #075e54;
            --success: #25d366;
            --light-bg: #f0f2f5;
            --card-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }

        body {
            background-color: var(--light-bg);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .navbar {
            background-color: white !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        }

        .navbar-brand {
            color: var(--primary) !important;
            font-weight: 600;
        }

        .metric-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            border: none;
            transition: transform 0.2s;
        }
        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .metric-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-bottom: 12px;
        }

        .metric-value {
            font-size: 32px;
            font-weight: 700;
            line-height: 1;
            margin-bottom: 4px;
        }

        .metric-label {
            color: #667781;
            font-size: 14px;
        }

        .time-toggle {
            background: white;
            border-radius: 24px;
            padding: 4px;
            display: inline-flex;
            box-shadow: var(--card-shadow);
        }

        .time-toggle .btn {
            border-radius: 20px;
            border: none;
            padding: 8px 20px;
            font-size: 14px;
            font-weight: 500;
            background: transparent;
            color: #667781;
        }

        .time-toggle .btn.active {
            background: var(--primary);
            color: white;
        }

        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: var(--card-shadow);
            height: 350px;
        }

        .device-card {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: var(--card-shadow);
            border: 1px solid #e9ecef;
            transition: all 0.3s;
            height: 100%;
        }

        .device-card.connected {
            border-color: var(--success);
            border-width: 2px;
        }

        .device-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        }

        .device-icon {
            width: 48px;
            height: 48px;
            background: #f0f9f7;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .device-info {
            background: #f8f9fa !important;
            border: 1px solid #e9ecef;
        }

        .device-status {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 6px;
        }

        .device-status.online {
            background-color: var(--success);
        }

        .device-status.offline {
            background-color: #e74c3c;
        }

        .btn-whatsapp {
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.3s;
        }

        .btn-whatsapp:hover {
            background-color: var(--primary-dark);
            color: white;
            transform: translateY(-1px);
        }

        .add-device-card {
            border: 2px dashed #dee2e6;
            background: #fafbfc;
            cursor: pointer;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .add-device-card:hover {
            border-color: var(--primary);
            background: #f0f9f7;
        }

        .nav-tabs {
            border-bottom: 2px solid #e9ecef;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #667781;
            font-weight: 500;
            padding: 12px 24px;
            background: transparent;
        }

        .nav-tabs .nav-link.active {
            color: var(--primary);
            border-bottom: 3px solid var(--primary);
        }

        #loading {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .qr-modal .modal-content {
            border-radius: 16px;
            overflow: hidden;
        }

        .qr-container {
            padding: 40px;
            text-align: center;
            background: white;
        }
        
        /* Campaign Calendar Styles */
        #campaignCalendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background: #e9ecef;
            padding: 1px;
            border-radius: 8px;
        }
        
        .calendar-header {
            background: var(--primary);
            color: white;
            padding: 10px;
            text-align: center;
            font-weight: 600;
            font-size: 14px;
        }
        
        .calendar-day {
            background: white;
            min-height: 80px;
            padding: 8px;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }
        
        .calendar-day:hover {
            background: #f8f9fa;
            transform: scale(1.02);
        }
        
        .calendar-day.other-month {
            color: #ccc;
            background: #fafafa;
        }
        
        .calendar-day.has-campaign {
            background: #e3f2fd;
            border: 2px solid var(--primary);
        }
        
        .calendar-date {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 4px;
        }
        
        .calendar-campaign-indicator {
            width: 6px;
            height: 6px;
            background: var(--success);
            border-radius: 50%;
            position: absolute;
            top: 8px;
            right: 8px;
        }
        
        .calendar-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .calendar-month-year {
            font-size: 20px;
            font-weight: 600;
            color: var(--primary);
        }
        
        .campaign-item {
            font-size: 10px;
            background: var(--primary);
            color: white;
            padding: 2px 4px;
            margin: 1px 0;
            border-radius: 3px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-whatsapp"></i> WhatsApp Analytics
            </a>
            <div class="ms-auto">
                <span class="navbar-text me-3">
                    <i class="bi bi-person-circle"></i> <%= user.fullName || user.email %>
                </span>
                <button class="btn btn-sm btn-outline-danger" onclick="logout()">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4">
        <!-- Tabs -->
        <ul class="nav nav-tabs mb-4" id="mainTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" data-bs-target="#dashboard" type="button">
                    <i class="bi bi-speedometer2"></i> Dashboard
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="devices-tab" data-bs-toggle="tab" data-bs-target="#devices" type="button">
                    <i class="bi bi-phone"></i> Devices
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="campaign-tab" data-bs-toggle="tab" data-bs-target="#campaign" type="button">
                    <i class="bi bi-calendar3"></i> Campaign
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="mainTabContent">
            <!-- Dashboard Tab -->
            <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                <!-- Time Range Toggle -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h5 class="mb-0">Analytics Overview</h5>
                        <small class="text-muted">Today: <%= new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %> | <span id="lastRefresh">Last refresh: Never</span></small>
                    </div>
                    <div class="d-flex gap-2 align-items-center">
                        <!-- Auto Refresh Toggle -->
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoRefreshToggle" checked onchange="toggleAutoRefresh()">
                            <label class="form-check-label" for="autoRefreshToggle">
                                <small>Auto-refresh (10s)</small>
                            </label>
                        </div>
                        
                        <!-- Manual Refresh Button -->
                        <button class="btn btn-sm btn-outline-secondary" onclick="refreshDashboard()" title="Refresh Now">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                        
                        <!-- Device Filter -->
                        <select class="form-select form-select-sm" id="deviceFilter" onchange="filterByDevice()" style="width: 200px;">
                            <option value="all">All Devices</option>
                        </select>
                        
                        <!-- Time Range -->
                        <div class="time-toggle">
                            <button class="btn" onclick="changeTimeRange('today')">Today</button>
                            <button class="btn active" onclick="changeTimeRange(7)">7 Days</button>
                            <button class="btn" onclick="changeTimeRange(30)">30 Days</button>
                            <button class="btn" onclick="changeTimeRange(90)">90 Days</button>
                            <button class="btn" onclick="showCustomDateRange()">Custom</button>
                        </div>
                    </div>
                </div>

                <!-- Custom Date Range (Hidden by default) -->
                <div id="customDateRange" class="card mb-3 d-none">
                    <div class="card-body">
                        <div class="row g-3 align-items-end">
                            <div class="col-md-4">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="startDate" max="">
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" id="endDate" max="">
                            </div>
                            <div class="col-md-4">
                                <button class="btn btn-whatsapp" onclick="applyCustomDateRange()">
                                    <i class="bi bi-check-lg"></i> Apply
                                </button>
                                <button class="btn btn-outline-secondary ms-2" onclick="hideCustomDateRange()">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Metrics Cards -->
                <div class="row g-3 mb-4">
                    <!-- First Row - Device Metrics -->
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-success bg-opacity-10 text-success">
                                <i class="bi bi-phone-fill"></i>
                            </div>
                            <div class="metric-value" id="activeDevices">0</div>
                            <div class="metric-label">Active Devices</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-danger bg-opacity-10 text-danger">
                                <i class="bi bi-phone-x"></i>
                            </div>
                            <div class="metric-value" id="inactiveDevices">0</div>
                            <div class="metric-label">Inactive Devices</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-primary bg-opacity-10 text-primary">
                                <i class="bi bi-send"></i>
                            </div>
                            <div class="metric-value" id="leadsSent">0</div>
                            <div class="metric-label">Leads Sent</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-info bg-opacity-10 text-info">
                                <i class="bi bi-inbox"></i>
                            </div>
                            <div class="metric-value" id="leadsReceived">0</div>
                            <div class="metric-label">Leads Received</div>
                            <small class="text-success" id="leadsReceivedPercent">0%</small>
                        </div>
                    </div>
                </div>

                <!-- Second Row - Lead Status Metrics -->
                <div class="row g-3 mb-4">
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-warning bg-opacity-10 text-warning">
                                <i class="bi bi-x-circle"></i>
                            </div>
                            <div class="metric-value" id="leadsNotReceived">0</div>
                            <div class="metric-label">Leads Not Received</div>
                            <small class="text-danger" id="leadsNotReceivedPercent">0%</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-success bg-opacity-10 text-success">
                                <i class="bi bi-check-double"></i>
                            </div>
                            <div class="metric-value" id="leadsRead">0</div>
                            <div class="metric-label">Leads Read</div>
                            <small class="text-success" id="leadsReadPercent">0%</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-secondary bg-opacity-10 text-secondary">
                                <i class="bi bi-check"></i>
                            </div>
                            <div class="metric-value" id="leadsNotRead">0</div>
                            <div class="metric-label">Leads Not Read</div>
                            <small class="text-secondary" id="leadsNotReadPercent">0%</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric-card">
                            <div class="metric-icon bg-primary bg-opacity-10 text-primary">
                                <i class="bi bi-reply"></i>
                            </div>
                            <div class="metric-value" id="leadsReplied">0</div>
                            <div class="metric-label">Leads Replied</div>
                            <small class="text-primary" id="leadsRepliedPercent">0%</small>
                        </div>
                    </div>
                </div>

                <!-- Chart -->
                <div class="chart-container">
                    <h5 class="mb-3">Daily Message Activity</h5>
                    <canvas id="messageChart"></canvas>
                </div>
            </div>

            <!-- Devices Tab -->
            <div class="tab-pane fade" id="devices" role="tabpanel">
                <!-- Devices Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h4 class="mb-1">WhatsApp Devices</h4>
                        <p class="text-muted mb-0">Manage your connected WhatsApp accounts</p>
                    </div>
                    <button class="btn btn-primary" onclick="addNewDevice()">
                        <i class="bi bi-plus-circle me-2"></i>Add Device
                    </button>
                </div>

                <!-- Devices Grid -->
                <div class="row g-4" id="devicesGrid">
                    <!-- Device cards will be dynamically added here -->
                </div>

                <!-- Empty State -->
                <div id="emptyDeviceState" class="text-center py-5" style="display: none;">
                    <i class="bi bi-phone" style="font-size: 64px; color: #dee2e6;"></i>
                    <h5 class="mt-3 text-muted">No devices connected</h5>
                    <p class="text-muted">Add a device to start using WhatsApp Analytics</p>
                    <button class="btn btn-primary mt-3" onclick="addNewDevice()">
                        <i class="bi bi-plus-circle me-2"></i>Add Your First Device
                    </button>
                </div>
            </div>
            
            <!-- Campaign Tab -->
            <div class="tab-pane fade" id="campaign" role="tabpanel">
                <!-- Campaign Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h4 class="mb-1">Campaign Calendar</h4>
                        <p class="text-muted mb-0">Plan and schedule your WhatsApp broadcast campaigns</p>
                    </div>
                </div>
                
                <!-- Calendar Container -->
                <div class="card">
                    <div class="card-body">
                        <!-- Calendar controls will be added here by JavaScript -->
                        <div id="campaignCalendar"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- QR Code Modal -->
    <div class="modal fade qr-modal" id="qrModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title">Scan QR Code</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="qr-container">
                        <div id="qrCode" style="width: 256px; height: 256px; margin: 0 auto; background: #f0f0f0;"></div>
                        <p class="mt-3 text-muted">Scan this QR code with WhatsApp on your phone</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add Device Modal -->
    <div class="modal fade" id="addDeviceModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Device</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addDeviceForm">
                        <div class="mb-3">
                            <label class="form-label">Device Name</label>
                            <input type="text" class="form-control" id="deviceName" placeholder="e.g. Work Phone" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitAddDevice()">Add Device</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Campaign Modal -->
    <div class="modal fade" id="campaignModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="campaignModalTitle">Create Campaign</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="campaignForm">
                        <input type="hidden" id="campaignId">
                        <input type="hidden" id="campaignDate">
                        
                        <div class="mb-3">
                            <label class="form-label">Campaign Title <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="campaignTitle" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Niche/Category <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="campaignNiche" required 
                                   placeholder="e.g., Promotion, Announcement, Reminder">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Message <span class="text-danger">*</span></label>
                            <textarea class="form-control" id="campaignMessage" rows="5" required 
                                      placeholder="Enter your broadcast message..."></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Image (Optional)</label>
                            <input type="file" class="form-control" id="campaignImageFile" accept="image/*" onchange="compressImage(this)">
                            <small class="text-muted">Max 5MB. Will be compressed automatically.</small>
                            <input type="hidden" id="campaignImageUrl">
                            <div id="imagePreview" class="mt-2"></div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Scheduled Time (Optional)</label>
                            <input type="time" class="form-control" id="campaignTime">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveCampaign()">Save Campaign</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loading">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let messageChart;
        let currentTimeRange = 7;
        let devices = [];
        let currentDeviceFilter = 'all';
        let refreshInterval;
        let isAutoRefreshEnabled = true;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeChart();
            loadDashboardData(7);
            loadDevices();
            
            // Set max date to today for date inputs
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('startDate').max = today;
            document.getElementById('endDate').max = today;
            document.getElementById('endDate').value = today;
            
            // Set start date to 7 days ago
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            document.getElementById('startDate').value = sevenDaysAgo.toISOString().split('T')[0];
            
            // Start auto-refresh
            if (isAutoRefreshEnabled) {
                startAutoRefresh();
            }
        });

        // Initialize Chart
        function initializeChart() {
            const ctx = document.getElementById('messageChart').getContext('2d');
            messageChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Leads Sent',
                        data: [],
                        borderColor: '#128c7e',
                        backgroundColor: 'rgba(18, 140, 126, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Leads Received',
                        data: [],
                        borderColor: '#25d366',
                        backgroundColor: 'rgba(37, 211, 102, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Leads Read',
                        data: [],
                        borderColor: '#34b7f1',
                        backgroundColor: 'rgba(52, 183, 241, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Leads Replied',
                        data: [],
                        borderColor: '#00a884',
                        backgroundColor: 'rgba(0, 168, 132, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: 'Lead Activity Trends'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Leads'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        }
                    }
                }
            });
        }

        // Load Dashboard Data
        async function loadDashboardData(days, silent = false) {
            if (!silent) {
                showLoading();
            }
            
            try {
                // Use our analytics endpoint
                const response = await fetch('/api/analytics/dashboard');
                const analytics = await response.json();
                
                // Update metrics
                updateMetrics(analytics);
                
                // Generate chart data
                const mockData = generateMockData(days);
                updateChart(mockData.daily);
                
            } catch (error) {
                console.error('Error loading analytics:', error);
                // Use mock data
                const mockData = generateMockData(days);
                updateMetrics(mockData.metrics);
                updateChart(mockData.daily);
            }
            
            if (!silent) {
                hideLoading();
            }
            
            // Update last refresh time
            document.getElementById('lastRefresh').textContent = 'Last refresh: ' + new Date().toLocaleTimeString();
        }

        // Generate Mock Data
        function generateMockData(days) {
            const metrics = {
                activeDevices: devices.filter(d => d.status === 'online').length,
                inactiveDevices: devices.filter(d => d.status === 'offline').length,
                leadsSent: 0,
                leadsReceived: 0,
                leadsNotReceived: 0,
                leadsRead: 0,
                leadsNotRead: 0,
                leadsReplied: 0
            };

            const daily = [];
            const today = new Date();
            
            for (let i = days - 1; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(today.getDate() - i);
                
                daily.push({
                    date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
                    sent: 0,
                    received: 0,
                    read: 0,
                    replied: 0
                });
            }

            return { metrics, daily };
        }

        // Update Metrics
        function updateMetrics(metrics) {
            // Device metrics
            const activeCount = devices.filter(d => d.status === 'online').length;
            const inactiveCount = devices.filter(d => d.status !== 'online').length;
            
            document.getElementById('activeDevices').textContent = activeCount;
            document.getElementById('inactiveDevices').textContent = inactiveCount;
            
            // Lead metrics
            document.getElementById('leadsSent').textContent = metrics.messagesSent || 0;
            document.getElementById('leadsReceived').textContent = metrics.messagesReceived || 0;
            document.getElementById('leadsNotReceived').textContent = 0;
            document.getElementById('leadsRead').textContent = 0;
            document.getElementById('leadsNotRead').textContent = 0;
            document.getElementById('leadsReplied').textContent = 0;
            
            // Percentages
            document.getElementById('leadsReceivedPercent').textContent = '0%';
            document.getElementById('leadsNotReceivedPercent').textContent = '0%';
            document.getElementById('leadsReadPercent').textContent = '0%';
            document.getElementById('leadsNotReadPercent').textContent = '0%';
            document.getElementById('leadsRepliedPercent').textContent = '0%';
        }

        // Update Chart
        function updateChart(dailyData) {
            const labels = dailyData.map(d => d.date);
            const sentData = dailyData.map(d => d.sent || 0);
            const receivedData = dailyData.map(d => d.received || 0);
            const readData = dailyData.map(d => d.read || 0);
            const repliedData = dailyData.map(d => d.replied || 0);

            messageChart.data.labels = labels;
            messageChart.data.datasets[0].data = sentData;
            messageChart.data.datasets[1].data = receivedData;
            messageChart.data.datasets[2].data = readData;
            messageChart.data.datasets[3].data = repliedData;
            messageChart.update();
        }

        // Change Time Range
        function changeTimeRange(days) {
            document.getElementById('customDateRange').classList.add('d-none');
            
            document.querySelectorAll('.time-toggle .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            if (days === 'today') {
                currentTimeRange = 1;
                loadDashboardData(1);
            } else {
                currentTimeRange = days;
                loadDashboardData(days);
            }
        }

        // Show/Hide Custom Date Range
        function showCustomDateRange() {
            document.getElementById('customDateRange').classList.remove('d-none');
            document.querySelectorAll('.time-toggle .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        function hideCustomDateRange() {
            document.getElementById('customDateRange').classList.add('d-none');
        }

        // Apply Custom Date Range
        function applyCustomDateRange() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            const start = new Date(startDate);
            const end = new Date(endDate);
            
            if (start > end) {
                alert('Start date must be before end date');
                return;
            }
            
            const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
            loadDashboardData(days);
            document.getElementById('customDateRange').classList.add('d-none');
        }

        // Load Devices
        async function loadDevices() {
            try {
                const response = await fetch('/api/devices');
                devices = await response.json();
                
                renderDevices();
                updateDeviceFilter();
                
                // Update metrics after loading devices
                const activeCount = devices.filter(d => d.status === 'online').length;
                const inactiveCount = devices.filter(d => d.status !== 'online').length;
                document.getElementById('activeDevices').textContent = activeCount;
                document.getElementById('inactiveDevices').textContent = inactiveCount;
                
            } catch (error) {
                console.error('Error loading devices:', error);
                devices = [];
                renderDevices();
            }
        }

        // Render Devices
        function renderDevices() {
            const grid = document.getElementById('devicesGrid');
            const emptyState = document.getElementById('emptyDeviceState');
            
            if (devices.length === 0) {
                grid.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }
            
            grid.style.display = 'flex';
            emptyState.style.display = 'none';
            
            grid.innerHTML = devices.map(device => {
                const isConnected = device.status === 'online';
                return `
                    <div class="col-md-6 col-lg-4">
                        <div class="device-card ${isConnected ? 'connected' : ''}">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div class="device-icon ${isConnected ? 'bg-success bg-opacity-10' : 'bg-secondary bg-opacity-10'}">
                                    <i class="bi bi-phone-fill fs-4 ${isConnected ? 'text-success' : 'text-secondary'}"></i>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-light" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" onclick="editDevice('${device.id}')">
                                            <i class="bi bi-pencil me-2"></i>Edit</a></li>
                                        <li><a class="dropdown-item" onclick="deleteDevice('${device.id}')">
                                            <i class="bi bi-trash me-2"></i>Delete</a></li>
                                    </ul>
                                </div>
                            </div>
                            
                            <h5 class="mb-1">${device.deviceName}</h5>
                            <p class="text-muted mb-3">
                                <span class="device-status ${isConnected ? 'online' : 'offline'}"></span>
                                ${isConnected ? 'Connected' : 'Disconnected'}
                            </p>
                            
                            <div class="device-info rounded p-2 mb-3">
                                <small class="text-muted d-block">
                                    <i class="bi bi-telephone me-1"></i>
                                    Phone Number
                                </small>
                                <span>${device.phone || 'Not linked'}</span>
                                ${!device.phone && !isConnected ? 
                                    '<button class="btn btn-link btn-sm p-0 ms-2" onclick="linkPhone(\'' + device.id + '\')">Add</button>' : ''}
                            </div>
                            
                            <div class="device-info rounded p-2 mb-3">
                                <small class="text-muted d-block">
                                    <i class="bi bi-clock me-1"></i>
                                    Last active
                                </small>
                                <span>${new Date(device.lastSeen).toLocaleString()}</span>
                            </div>
                            
                            ${isConnected ? `
                                <button class="btn btn-whatsapp w-100 mb-2" onclick="window.location.href='/device/${device.id}/whatsapp'">
                                    <i class="bi bi-whatsapp me-2"></i>WhatsApp Web
                                </button>
                                <div class="row g-2">
                                    <div class="col-6">
                                        <button class="btn btn-outline-primary btn-sm w-100" onclick="window.location.href='/device/${device.id}/actions'">
                                            <i class="bi bi-tools"></i> Actions
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-outline-info btn-sm w-100" onclick="window.location.href='/device/${device.id}/leads'">
                                            <i class="bi bi-people"></i> Leads
                                        </button>
                                    </div>
                                </div>
                                <div class="row g-2 mt-1">
                                    <div class="col-6">
                                        <button class="btn btn-outline-secondary btn-sm w-100" onclick="showAnalytics('${device.id}')">
                                            <i class="bi bi-graph-up"></i> Analytics
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-outline-danger btn-sm w-100" onclick="logoutDevice('${device.id}')">
                                            <i class="bi bi-box-arrow-right"></i> Logout
                                        </button>
                                    </div>
                                </div>
                            ` : `
                                <button class="btn btn-primary w-100" onclick="connectDevice('${device.id}')">
                                    <i class="bi bi-qr-code me-2"></i>QR Code
                                </button>
                                <button class="btn btn-outline-secondary w-100 mt-2" onclick="connectWithPhone('${device.id}')">
                                    <i class="bi bi-hash me-2"></i>Phone Code
                                </button>
                            `}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update Device Filter
        function updateDeviceFilter() {
            const filter = document.getElementById('deviceFilter');
            filter.innerHTML = '<option value="all">All Devices</option>';
            
            devices.forEach(device => {
                const option = document.createElement('option');
                option.value = device.id;
                option.textContent = device.deviceName;
                filter.appendChild(option);
            });
        }

        // Filter by Device
        function filterByDevice() {
            currentDeviceFilter = document.getElementById('deviceFilter').value;
            loadDashboardData(currentTimeRange);
        }

        // Device Operations
        function addNewDevice() {
            const modal = new bootstrap.Modal(document.getElementById('addDeviceModal'));
            modal.show();
        }

        async function submitAddDevice() {
            const deviceName = document.getElementById('deviceName').value;
            if (!deviceName) return;
            
            try {
                const response = await fetch('/api/devices', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ deviceName })
                });
                
                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addDeviceModal'));
                    modal.hide();
                    document.getElementById('deviceName').value = '';
                    loadDevices();
                }
            } catch (error) {
                console.error('Error adding device:', error);
                alert('Failed to add device');
            }
        }

        function connectDevice(deviceId) {
            window.location.href = `/api/devices/${deviceId}/qr`;
        }

        function connectWithPhone(deviceId) {
            // TODO: Implement phone code connection
            alert('Phone code connection coming soon!');
        }

        async function deleteDevice(deviceId) {
            if (!confirm('Are you sure you want to delete this device?')) return;
            
            try {
                const response = await fetch(`/api/devices/${deviceId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    loadDevices();
                }
            } catch (error) {
                console.error('Error deleting device:', error);
                alert('Failed to delete device');
            }
        }

        async function logoutDevice(deviceId) {
            if (!confirm('Are you sure you want to logout this device?')) return;
            
            try {
                const response = await fetch(`/api/devices/${deviceId}/logout`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    loadDevices();
                }
            } catch (error) {
                console.error('Error logging out device:', error);
                alert('Failed to logout device');
            }
        }

        function editDevice(deviceId) {
            // TODO: Implement edit
            alert('Edit device coming soon!');
        }

        function linkPhone(deviceId) {
            // TODO: Implement phone linking
            alert('Phone linking coming soon!');
        }

        function showAnalytics(deviceId) {
            // TODO: Implement device analytics
            alert('Device analytics coming soon!');
        }

        // Auto Refresh
        function toggleAutoRefresh() {
            isAutoRefreshEnabled = document.getElementById('autoRefreshToggle').checked;
            
            if (isAutoRefreshEnabled) {
                startAutoRefresh();
            } else {
                stopAutoRefresh();
            }
        }

        function startAutoRefresh() {
            refreshInterval = setInterval(() => {
                refreshDashboard();
            }, 10000); // 10 seconds
        }

        function stopAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
        }

        function refreshDashboard() {
            loadDashboardData(currentTimeRange, true);
            loadDevices();
        }

        // Utility Functions
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
        }

        function logout() {
            fetch('/api/auth/logout', { method: 'POST' })
                .then(() => window.location.href = '/login')
                .catch(() => window.location.href = '/login');
        }

        // Campaign Functions
        function saveCampaign() {
            // TODO: Implement campaign save
            alert('Campaign save coming soon!');
        }

        function compressImage(input) {
            // TODO: Implement image compression
            console.log('Image compression needed');
        }
    </script>
</body>
</html>