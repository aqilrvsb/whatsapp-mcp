<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Actions - WhatsApp Testing</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary: #128c7e;
            --primary-dark: #075e54;
            --success: #25d366;
            --light-bg: #f0f2f5;
            --card-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }

        body {
            background-color: var(--light-bg);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .navbar {
            background-color: white !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.08);
            padding: 1rem 0;
        }

        .action-card {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: var(--card-shadow);
            margin-bottom: 20px;
        }

        .test-button {
            background: var(--success);
            color: white;
            border: none;
            padding: 10px 24px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s;
        }

        .test-button:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .result-box {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
            font-family: monospace;
            font-size: 14px;
            min-height: 100px;
            max-height: 300px;
            overflow-y: auto;
        }

        .success-result {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .error-result {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .device-info {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 24px;
            border-left: 4px solid var(--primary);
        }

        .device-status {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .device-status.online {
            background: var(--success);
        }

        .device-status.offline {
            background: #dc3545;
        }
    </style>
</head>
<body>    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container">
            <a class="navbar-brand" href="/dashboard">
                <i class="bi bi-whatsapp" style="color: var(--success); font-size: 24px;"></i>
                <span style="color: var(--primary); font-weight: 600; margin-left: 8px;">WhatsApp Analytics</span>
            </a>
            <button class="btn btn-outline-secondary" onclick="window.location.href='/dashboard'">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </button>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4">
        <!-- Device Info -->
        <div class="device-info">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1">
                        <span class="device-status" id="deviceStatus"></span>
                        <span id="deviceName">Loading...</span>
                    </h4>
                    <p class="text-muted mb-0">
                        Phone: <span id="devicePhone">Not connected</span> | 
                        Device ID: <span id="deviceId"></span>
                    </p>
                </div>
                <button class="btn btn-sm btn-outline-primary" onclick="refreshStatus()">
                    <i class="bi bi-arrow-clockwise"></i> Refresh Status
                </button>
            </div>
        </div>
        <!-- Actions Grid -->
        <div class="row">
            <!-- Send Message -->
            <div class="col-md-6">
                <div class="action-card">
                    <h5 class="mb-3">
                        <i class="bi bi-chat-text text-primary"></i> Send Test Message
                    </h5>
                    <form id="sendMessageForm">
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <div class="input-group">
                                <span class="input-group-text">+60</span>
                                <input type="text" class="form-control" id="testPhone" placeholder="123456789" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Message</label>
                            <textarea class="form-control" id="testMessage" rows="3" placeholder="Enter your test message..." required></textarea>
                        </div>
                        <button type="submit" class="test-button w-100">
                            <i class="bi bi-send"></i> Send Message
                        </button>
                    </form>
                    <div id="messageResult" class="result-box" style="display: none;"></div>
                </div>
            </div>

            <!-- Send Image -->
            <div class="col-md-6">
                <div class="action-card">
                    <h5 class="mb-3">
                        <i class="bi bi-image text-primary"></i> Send Test Image
                    </h5>
                    <form id="sendImageForm">
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <div class="input-group">
                                <span class="input-group-text">+60</span>
                                <input type="text" class="form-control" id="imagePhone" placeholder="123456789" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image</label>
                            <input type="file" class="form-control" id="testImage" accept="image/*" required>
                            <small class="text-muted">Max 350KB. Will be compressed automatically.</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Caption (Optional)</label>
                            <textarea class="form-control" id="imageCaption" rows="3" placeholder="Add a caption to your image..."></textarea>
                        </div>
                        <button type="submit" class="test-button w-100">
                            <i class="bi bi-upload"></i> Send Image
                        </button>
                    </form>
                    <div id="imageResult" class="result-box" style="display: none;"></div>
                </div>
            </div>
            <!-- Check Status -->
            <div class="col-md-6">
                <div class="action-card">
                    <h5 class="mb-3">
                        <i class="bi bi-check-circle text-primary"></i> Check Number Status
                    </h5>
                    <form id="checkStatusForm">
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <div class="input-group">
                                <span class="input-group-text">+60</span>
                                <input type="text" class="form-control" id="checkPhone" placeholder="123456789" required>
                            </div>
                        </div>
                        <button type="submit" class="test-button w-100">
                            <i class="bi bi-search"></i> Check Status
                        </button>
                    </form>
                    <div id="statusResult" class="result-box" style="display: none;"></div>
                </div>
            </div>

            <!-- Send Broadcast -->
            <div class="col-md-6">
                <div class="action-card">
                    <h5 class="mb-3">
                        <i class="bi bi-megaphone text-primary"></i> Test Broadcast
                    </h5>
                    <form id="sendBroadcastForm">
                        <div class="mb-3">
                            <label class="form-label">Phone Numbers (comma separated, without +)</label>
                            <textarea class="form-control" id="broadcastPhones" rows="2" placeholder="60123456789, 60987654321" required></textarea>
                            <small class="text-muted">Include country code (e.g., 60 for Malaysia)</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Message</label>
                            <textarea class="form-control" id="broadcastMessage" rows="3" placeholder="Broadcast message..." required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image (Optional)</label>
                            <input type="file" class="form-control" id="broadcastImage" accept="image/*">
                            <small class="text-muted">Max 350KB. Will be compressed automatically.</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Schedule Time (Optional)</label>
                            <input type="datetime-local" class="form-control" id="broadcastSchedule">
                            <small class="text-muted">Leave empty to send immediately</small>
                        </div>
                        <button type="submit" class="test-button w-100">
                            <i class="bi bi-broadcast"></i> Send Broadcast
                        </button>
                    </form>
                    <div id="broadcastResult" class="result-box" style="display: none;"></div>
                </div>
            </div>
        </div>

        <!-- Activity Log -->
        <div class="action-card mt-4">
            <h5 class="mb-3">
                <i class="bi bi-clock-history text-primary"></i> Activity Log
            </h5>
            <div id="activityLog" class="result-box" style="display: block; min-height: 200px;">
                <p class="text-muted">No activity yet. Start testing above!</p>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>        // Get device ID from URL
        const pathParts = window.location.pathname.split('/');
        const deviceId = pathParts[2];
        
        // Activity log
        const activityLog = [];
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('deviceId').textContent = deviceId;
            loadDeviceInfo();
            
            // Setup form handlers
            document.getElementById('sendMessageForm').addEventListener('submit', sendMessage);
            document.getElementById('sendImageForm').addEventListener('submit', sendImage);
            document.getElementById('checkStatusForm').addEventListener('submit', checkStatus);
            document.getElementById('sendBroadcastForm').addEventListener('submit', sendBroadcast);
        });
        
        // Load device info
        function loadDeviceInfo() {
            fetch(`/api/devices/${deviceId}`, { credentials: 'include' })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle both wrapped and unwrapped responses
                    const device = data.results || data;
                    
                    if (device) {
                        document.getElementById('deviceName').textContent = device.deviceName || 'Unknown Device';
                        document.getElementById('devicePhone').textContent = device.phone || 'Not connected';
                        
                        const statusEl = document.getElementById('deviceStatus');
                        statusEl.className = `device-status ${device.status}`;
                        
                        if (device.status !== 'online') {
                            showWarning('This device is not connected. Please connect it first from the Devices tab.');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading device:', error);
                    document.getElementById('deviceName').textContent = 'Error Loading';
                    document.getElementById('devicePhone').textContent = 'Error';
                    showError('Failed to load device information: ' + error.message);
                });
        }        
        // Refresh device status
        function refreshStatus() {
            loadDeviceInfo();
            addToLog('Refreshed device status');
        }
        
        // Format phone number with +60 prefix
        function formatPhone(phone) {
            // Remove all non-numeric characters
            phone = phone.replace(/\D/g, '');
            
            // If it starts with 60, return as is
            if (phone.startsWith('60')) {
                return '+' + phone;
            }
            
            // If it starts with 0, remove it and add 60
            if (phone.startsWith('0')) {
                phone = phone.substring(1);
            }
            
            // Add +60 prefix
            return '+60' + phone;
        }
        
        // Send test message
        function sendMessage(e) {
            e.preventDefault();
            
            const phone = formatPhone(document.getElementById('testPhone').value);
            const message = document.getElementById('testMessage').value;
            const resultBox = document.getElementById('messageResult');
            
            resultBox.style.display = 'block';
            resultBox.className = 'result-box';
            resultBox.innerHTML = '<i class="bi bi-hourglass-split"></i> Sending message...';
            
            fetch('/api/whatsapp/send/message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    deviceId: deviceId,
                    phone: phone,
                    message: message
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === 'SUCCESS') {
                    resultBox.className = 'result-box success-result';
                    resultBox.innerHTML = '<i class="bi bi-check-circle"></i> Message sent successfully!';
                    addToLog(`Sent message to ${phone}`);
                    
                    // Clear form
                    document.getElementById('sendMessageForm').reset();
                } else {
                    resultBox.className = 'result-box error-result';
                    resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Failed: ${data.message || 'Unknown error'}`;
                }
            })
            .catch(error => {
                resultBox.className = 'result-box error-result';
                resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Error: ${error.message}`;
            });
        }        
        // Send test image with compression
        function sendImage(e) {
            e.preventDefault();
            
            const phone = formatPhone(document.getElementById('imagePhone').value);
            const caption = document.getElementById('imageCaption').value;
            const imageFile = document.getElementById('testImage').files[0];
            const resultBox = document.getElementById('imageResult');
            
            if (!imageFile) {
                resultBox.style.display = 'block';
                resultBox.className = 'result-box error-result';
                resultBox.innerHTML = '<i class="bi bi-x-circle"></i> Please select an image';
                return;
            }
            
            resultBox.style.display = 'block';
            resultBox.className = 'result-box';
            resultBox.innerHTML = '<i class="bi bi-hourglass-split"></i> Compressing and sending image...';
            
            // Compress image before sending
            compressImageFile(imageFile, function(compressedBlob) {
                // Convert blob to base64
                const reader = new FileReader();
                reader.onloadend = function() {
                    const base64Data = reader.result;
                    
                    fetch('/api/whatsapp/send/image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({
                            deviceId: deviceId,
                            phone: phone,
                            caption: caption,
                            imageUrl: base64Data
                        })
                    })
                .then(response => response.json())
                .then(data => {
                    if (data.code === 'SUCCESS') {
                        resultBox.className = 'result-box success-result';
                        resultBox.innerHTML = '<i class="bi bi-check-circle"></i> Image sent successfully!';
                        addToLog(`Sent image to ${phone}`);
                        
                        // Clear form
                        document.getElementById('sendImageForm').reset();
                    } else {
                        resultBox.className = 'result-box error-result';
                        resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Failed: ${data.message || 'Unknown error'}`;
                    }
                })
                .catch(error => {
                    resultBox.className = 'result-box error-result';
                    resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Error: ${error.message}`;
                });
                };
                reader.readAsDataURL(compressedBlob);
            });
        }        
        // Compress image file to 350KB max
        function compressImageFile(file, callback) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    // Start with reasonable dimensions
                    let width = img.width;
                    let height = img.height;
                    let quality = 0.9;
                    
                    // First resize if too large
                    const maxSize = 1000;
                    if (width > height) {
                        if (width > maxSize) {
                            height = (height * maxSize) / width;
                            width = maxSize;
                        }
                    } else {
                        if (height > maxSize) {
                            width = (width * maxSize) / height;
                            height = maxSize;
                        }
                    }
                    
                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);
                    
                    // Compress until under 350KB
                    function tryCompress() {
                        canvas.toBlob(function(blob) {
                            if (blob.size > 350 * 1024 && quality > 0.1) {
                                quality -= 0.1;
                                tryCompress();
                            } else {
                                callback(blob);
                            }
                        }, 'image/jpeg', quality);
                    }
                    
                    tryCompress();
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }        
        // Check number status
        function checkStatus(e) {
            e.preventDefault();
            
            const phone = formatPhone(document.getElementById('checkPhone').value);
            const resultBox = document.getElementById('statusResult');
            
            resultBox.style.display = 'block';
            resultBox.className = 'result-box';
            resultBox.innerHTML = '<i class="bi bi-hourglass-split"></i> Checking status...';
            
            fetch('/api/whatsapp/check/number', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    deviceId: deviceId,
                    phone: phone
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === 'SUCCESS') {
                    const result = data.results;
                    resultBox.className = 'result-box success-result';
                    resultBox.innerHTML = `
                        <i class="bi bi-check-circle"></i> Number Status:<br>
                        Phone: ${result.phone}<br>
                        On WhatsApp: ${result.exists ? 'Yes' : 'No'}<br>
                        ${result.jid ? `JID: ${result.jid}` : ''}
                    `;
                    addToLog(`Checked status for ${phone}`);
                } else {
                    resultBox.className = 'result-box error-result';
                    resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Failed: ${data.message || 'Unknown error'}`;
                }
            })
            .catch(error => {
                resultBox.className = 'result-box error-result';
                resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Error: ${error.message}`;
            });
        }        
        // Send broadcast
        function sendBroadcast(e) {
            e.preventDefault();
            
            const phones = document.getElementById('broadcastPhones').value.split(',').map(p => formatPhone(p.trim()));
            const message = document.getElementById('broadcastMessage').value;
            const resultBox = document.getElementById('broadcastResult');
            
            resultBox.style.display = 'block';
            resultBox.className = 'result-box';
            resultBox.innerHTML = '<i class="bi bi-hourglass-split"></i> Sending broadcast...';
            
            // Use the broadcast API endpoint
            fetch('/api/whatsapp/send/broadcast', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include',
                body: JSON.stringify({
                    deviceId: deviceId,
                    phones: phones,
                    message: message
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === 'SUCCESS') {
                    const results = data.results;
                    resultBox.className = 'result-box success-result';
                    resultBox.innerHTML = `<i class="bi bi-check-circle"></i> Broadcast complete! Sent: ${results.sent}, Failed: ${results.failed}`;
                    addToLog(`Broadcast: ${results.sent} sent, ${results.failed} failed`);
                } else {
                    resultBox.className = 'result-box error-result';
                    resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Failed: ${data.message || 'Unknown error'}`;
                }
                
                // Clear form
                document.getElementById('sendBroadcastForm').reset();
            })
            .catch(error => {
                resultBox.className = 'result-box error-result';
                resultBox.innerHTML = `<i class="bi bi-x-circle"></i> Error: ${error.message}`;
            });
        }
        
        // Add to activity log
        function addToLog(message) {
            const timestamp = new Date().toLocaleTimeString();
            activityLog.unshift(`[${timestamp}] ${message}`);
            
            // Keep only last 50 entries
            if (activityLog.length > 50) {
                activityLog.pop();
            }
            
            // Update display
            const logEl = document.getElementById('activityLog');
            logEl.innerHTML = activityLog.join('<br>');
        }
        
        // Show warning
        function showWarning(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-warning alert-dismissible fade show';
            alert.innerHTML = `
                <i class="bi bi-exclamation-triangle"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container').insertBefore(alert, document.querySelector('.device-info'));
        }
        
        // Show error
        function showError(message) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-danger alert-dismissible fade show';
            alert.innerHTML = `
                <i class="bi bi-x-circle"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container').insertBefore(alert, document.querySelector('.device-info'));
        }
    </script>
</body>
</html>